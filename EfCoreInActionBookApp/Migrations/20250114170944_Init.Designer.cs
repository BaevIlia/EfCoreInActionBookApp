// <auto-generated />
using System;
using EfCoreInActionBookApp.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EfCoreInActionBookApp.Migrations
{
    [DbContext(typeof(BookAppDbContext))]
    [Migration("20250114170944_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookEntityTagEntity", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("integer");

                    b.Property<string>("TagsId")
                        .HasColumnType("text");

                    b.HasKey("BooksId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("BookEntityTagEntity");
                });

            modelBuilder.Entity("EfCoreInActionBookApp.Domain.Entities.AuthorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("EfCoreInActionBookApp.Domain.Entities.BookAuthorEntity", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int?>("AuthorEntityId")
                        .HasColumnType("integer");

                    b.Property<int?>("BookEntityId")
                        .HasColumnType("integer");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorEntityId");

                    b.HasIndex("BookEntityId");

                    b.ToTable("BookAuthorEntity");
                });

            modelBuilder.Entity("EfCoreInActionBookApp.Domain.Entities.BookEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("EfCoreInActionBookApp.Domain.Entities.PriceOfferEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("PromotionalText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PriceOffers");
                });

            modelBuilder.Entity("EfCoreInActionBookApp.Domain.Entities.ReviewEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumStars")
                        .HasColumnType("integer");

                    b.Property<string>("VoterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BookEntityId");

                    b.ToTable("ReviewEntity");
                });

            modelBuilder.Entity("EfCoreInActionBookApp.Domain.Entities.TagEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BookEntityTagEntity", b =>
                {
                    b.HasOne("EfCoreInActionBookApp.Domain.Entities.BookEntity", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EfCoreInActionBookApp.Domain.Entities.TagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EfCoreInActionBookApp.Domain.Entities.BookAuthorEntity", b =>
                {
                    b.HasOne("EfCoreInActionBookApp.Domain.Entities.AuthorEntity", null)
                        .WithMany("BookLink")
                        .HasForeignKey("AuthorEntityId");

                    b.HasOne("EfCoreInActionBookApp.Domain.Entities.BookEntity", null)
                        .WithMany("AuthorLinks")
                        .HasForeignKey("BookEntityId");
                });

            modelBuilder.Entity("EfCoreInActionBookApp.Domain.Entities.BookEntity", b =>
                {
                    b.HasOne("EfCoreInActionBookApp.Domain.Entities.PriceOfferEntity", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("EfCoreInActionBookApp.Domain.Entities.ReviewEntity", b =>
                {
                    b.HasOne("EfCoreInActionBookApp.Domain.Entities.BookEntity", null)
                        .WithMany("Reviews")
                        .HasForeignKey("BookEntityId");
                });

            modelBuilder.Entity("EfCoreInActionBookApp.Domain.Entities.AuthorEntity", b =>
                {
                    b.Navigation("BookLink");
                });

            modelBuilder.Entity("EfCoreInActionBookApp.Domain.Entities.BookEntity", b =>
                {
                    b.Navigation("AuthorLinks");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
